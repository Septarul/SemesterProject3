@page "/products"
@using BlazorWebApp.Model.Domain
@using System.Net.Http.Headers
@using System.Runtime.Serialization.Json
@inject System.Net.Http.HttpClient client

<h2>View all products here</h2>


@if (items == null || !items.Any())
{
    <p>Nothing to see here</p>
}
else
{
    <button class="btn btn-primary" @onclick="Fetch">Fetch Todos</button>
    <table class="table" style="width:300px">
        <thead>
            <tr>
                <th>Image</th>
                <th>Name</th>

                <th>Image</th>
                <th>Name</th>

                <th>Image</th>
                <th>Name</th>

            </tr>
        </thead>
        <tbody>
            @for (var z = 0; z < items.Count - 2; z++)
            {
            <tr>
                <td width="33%">@items[z].price</td>
                <td width="33%"><img src="@items[z].url" height="200" /></td>
                <br />
                <span>@items[z].price</span>

                <td hidden>@(z++)</td>
                <td width="33%">@items[z].price</td>
                <td width="33%"><img src="@items[z].url" height="200" /></td>
                <br />
                <span>@items[z].price</span>

                <td hidden>@(z++)</td>
                <td width="33%">@items[z].price</td>
                <td width="33%"><img src="@items[z].url" height="200" /></td>
                <br />
                <span>@items[z].price</span>

            </tr>
            }

        </tbody>
    </table>

}

@code {

    private List<Item> items
    { get; set; }

   protected override async Task OnInitializedAsync() {


        var serializer = new DataContractJsonSerializer(typeof(List<Item>));
        // JavaScriptSerializer json_serializer = new JavaScriptSerializer();
        client.DefaultRequestHeaders.Accept.Clear();
        /* client.DefaultRequestHeaders.Accept.Add(
            new MediaTypeWithQualityHeaderValue("application/vnd.github.v3+json"));

       client.DefaultRequestHeaders.Add("User-Agent", ".NET Foundation Repository Reporter");

        */
        string uri = "http://localhost:8080/items";

        var streamTask = client.GetStreamAsync(uri);
       
        items = serializer.ReadObject(await streamTask) as List<Item>;
        // User usera = serializer.ReadObject(await streamTask) as User;

        //User usera = json_serializer.Deserialize<User>(streamTask.Result);
    }

    private async Task Fetch() { }
}
